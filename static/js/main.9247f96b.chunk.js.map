{"version":3,"sources":["Components/Stage/Stage.tsx","Utils/usePosition.ts","Components/Dinosaur/index.ts","Components/Dinosaur/Dinosaur.tsx","Utils/dinoHeightFunction.ts","Components/Ground/index.ts","Components/Ground/Ground.tsx","Components/Message/index.ts","Components/Message/Message.tsx","Components/Obstacle/index.ts","Components/Obstacle/Obstacle.tsx","Components/Score/Score.tsx","Components/Score/index.ts","Components/Stage/index.ts","Constants.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GameState","isIntersecting","r1","r2","Math","max","x","min","width","y","height","Dinosaur","props","gameState","dinoRef","useState","sprite","setSprite","jumpTime","setJumpTime","useEffect","timeout","setTimeout","clearTimeout","handleKeyDown","e","key","jump","window","addEventListener","removeEventListener","useCallback","imageExtension","InProgress","useMemo","ref","className","style","bottom","time","transition","src","Ground","gameLevel","dx","setDx","left","Message","messageSubtext","messageText","NotStarted","Dead","Obstacle","obstacleRef","numObstacles","lifetime","setLifetime","Array","fill","undefined","map","idx","padInt","length","leadingZeroes","i","slice","Score","score","highScore","Stage","obstacles","setObstacles","obstacleRefArr","setObstacleRefArr","setGameState","setGameLevel","setScore","setHighScore","useRef","dinoRect","current","offsetLeft","offsetTop","clientWidth","clientHeight","rect","setRect","offsetWidth","offsetHeight","usePosition","obstacleRects","refArr","rectArr","setRectArr","newRectArr","usePositionArr","arr","rect2","isIntersectingWithArr","floor","React","createRef","newObstacles","random","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9247f96b.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\n\nimport { STAGE_WIDTH } from '../../Constants'\nimport { isIntersectingWithArr, usePosition, usePositionArr } from '../../Utils/usePosition'\nimport Dinosaur from '../Dinosaur'\nimport Ground from '../Ground'\nimport Message from '../Message'\nimport Obstacle from '../Obstacle'\nimport Score from '../Score'\n\nexport enum GameState {\n    NotStarted = 'NotStarted',\n    InProgress = 'InProgress',\n    Dead = 'Dead',\n}\n\nexport const Stage: React.FC = () => {\n    const [obstacles, setObstacles] = useState<JSX.Element[]>([])\n    const [obstacleRefArr, setObstacleRefArr] = useState<React.RefObject<HTMLDivElement>[]>([])\n    const [gameState, setGameState] = useState<GameState>(GameState.NotStarted)\n    const [gameLevel, setGameLevel] = useState<number>(0)\n    const [score, setScore] = useState<number>(0)\n    const [highScore, setHighScore] = useState<number>(0)\n    const dinoRef = useRef<HTMLDivElement>(null)\n    const dinoRect = usePosition(dinoRef)\n    const obstacleRects = usePositionArr(obstacleRefArr)\n\n    useEffect(() => {\n        if (gameState === GameState.InProgress) {\n            if (isIntersectingWithArr(dinoRect, obstacleRects)) {\n                setGameState(GameState.Dead)\n            }\n        }\n    }, [dinoRect, obstacleRects, gameState])\n\n    useEffect(() => {\n        if (gameState === GameState.Dead) {\n            setHighScore(Math.max(highScore, score))\n            setObstacles([])\n            setGameLevel(0)\n        }\n\n        const handleKeyDown = (e: KeyboardEvent) => {\n            if (e.key === ' ' || e.key === 'ArrowUp') {\n                if (gameState !== GameState.InProgress) {\n                    setScore(0)\n                    setGameState(GameState.InProgress)\n                }\n            }\n        }\n        window.addEventListener('keydown', handleKeyDown)\n        return () => window.removeEventListener('keydown', handleKeyDown)\n    }, [gameState])\n\n    useEffect(() => {\n        if (gameState === GameState.InProgress) {\n            setGameLevel(Math.min(5, Math.floor(score / 100)))\n            const timeout = setTimeout(() => setScore(score + 1), 100 - gameLevel * 10)\n            return () => clearTimeout(timeout)\n        }\n    }, [score, gameState, gameLevel])\n\n    useEffect(() => {\n        if (gameState === GameState.InProgress) {\n            const timeout = setTimeout(() => {\n                const ref = React.createRef<HTMLDivElement>()\n                const newObstacles = [...obstacles.slice(-2), <Obstacle key={score} obstacleRef={ref} gameState={gameState} gameLevel={gameLevel} numObstacles={Math.random() > 0.75 ? 2 : 1} />]\n                setObstacles(newObstacles)\n                setObstacleRefArr([...obstacleRefArr.slice(-2), ref])\n            }, ((Math.random() * 5000 + 2000) * (7 - gameLevel)) / 7)\n            return () => clearTimeout(timeout)\n        }\n    }, [obstacles, gameState])\n\n    return (\n        <div className=\"relative flex h-60 mx-auto my-4 overflow-hidden\" style={{ width: STAGE_WIDTH }}>\n            <Message gameState={gameState} />\n            <Score score={score} highScore={highScore} />\n            {obstacles}\n            <Dinosaur dinoRef={dinoRef} gameState={gameState} />\n            <Ground gameState={gameState} gameLevel={gameLevel} />\n        </div>\n    )\n}\n","import React, { useEffect, useState } from 'react'\n\nexport interface ClientRect {\n    x: number\n    y: number\n    width: number\n    height: number\n}\n\nexport const usePosition = (ref: React.MutableRefObject<HTMLElement | null>): ClientRect => {\n    const [rect, setRect] = useState<ClientRect>(\n        ref.current === null ? { x: 0, y: 0, width: 0, height: 0 } : { x: ref.current.offsetLeft, y: ref.current.offsetTop, width: ref.current.clientWidth, height: ref.current.clientHeight },\n    )\n\n    useEffect(() => {\n        if (ref.current !== null) {\n            setRect({ x: ref.current.offsetLeft, y: ref.current.offsetTop, width: ref.current.offsetWidth, height: ref.current.offsetHeight })\n        }\n    }, [ref.current?.offsetTop, ref.current?.offsetLeft])\n\n    return rect\n}\n\nexport const usePositionArr = (refArr: React.RefObject<HTMLDivElement | null>[]): ClientRect[] => {\n    const [rectArr, setRectArr] = useState<ClientRect[]>(\n        refArr.map((ref) =>\n            ref.current === null ? { x: 0, y: 0, width: 0, height: 0 } : { x: ref.current.offsetLeft, y: ref.current.offsetTop, width: ref.current.clientWidth, height: ref.current.clientHeight },\n        ),\n    )\n\n    useEffect(() => {\n        const newRectArr = refArr.map((ref) =>\n            ref.current === null ? { x: 0, y: 0, width: 0, height: 0 } : { x: ref.current.offsetLeft, y: ref.current.offsetTop, width: ref.current.clientWidth, height: ref.current.clientHeight },\n        )\n        setRectArr(newRectArr)\n    }, [refArr, refArr[0]?.current?.offsetLeft, refArr[1]?.current?.offsetLeft, refArr[2]?.current?.offsetLeft])\n\n    return rectArr\n}\n\nexport const isIntersectingWithArr = (rect: ClientRect, arr: ClientRect[]): boolean => {\n    for (const rect2 of arr) {\n        if (isIntersecting(rect, rect2)) return true\n    }\n    return false\n}\n\nconst isIntersecting = (r1: ClientRect, r2: ClientRect): boolean => {\n    return Math.max(r1.x, r2.x) < Math.min(r1.x + r1.width, r2.x + r2.width) && Math.max(r1.y, r2.y) < Math.min(r1.y + r1.height, r2.y + r2.height)\n}\n","import { Dinosaur } from './Dinosaur'\nexport default Dinosaur\n","import React, { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport { heightFunction } from '../../Utils/dinoHeightFunction'\nimport { GameState } from '../Stage/Stage'\n\ninterface DinosaurProps {\n    gameState: GameState\n    dinoRef: React.MutableRefObject<HTMLDivElement | null>\n}\n\nexport const Dinosaur: React.FC<DinosaurProps> = (props: DinosaurProps) => {\n    const { gameState, dinoRef } = props\n    const [sprite, setSprite] = useState<boolean>(true)\n    const [jumpTime, setJumpTime] = useState<number>(-1)\n\n    useEffect(() => {\n        if (jumpTime >= 500) {\n            setJumpTime(-1)\n            return\n        }\n        if (jumpTime < 0) return\n        const timeout = setTimeout(() => setJumpTime(jumpTime + 25), 25)\n        return () => clearTimeout(timeout)\n    }, [jumpTime])\n\n    useEffect(() => {\n        if (jumpTime > 0) return\n        const timeout = setTimeout(() => setSprite(!sprite), 150)\n        return () => clearTimeout(timeout)\n    }, [sprite, jumpTime])\n\n    useEffect(() => {\n        const handleKeyDown = (e: { key: string }) => {\n            if (e.key === ' ' || e.key === 'ArrowUp') jump()\n        }\n        window.addEventListener('keydown', handleKeyDown)\n        return () => window.removeEventListener('keydown', handleKeyDown)\n    }, [jumpTime])\n\n    const jump = useCallback(() => {\n        if (jumpTime > 0) return\n        setJumpTime(0)\n    }, [jumpTime])\n\n    const imageExtension = gameState === GameState.InProgress ? (sprite ? '-1' : '-2') : ''\n\n    return useMemo(\n        () => (\n            <div ref={dinoRef} className=\"absolute left-4 z-10 transform h-12 w-12\" style={{ bottom: jumpTime < 0 ? 12 : heightFunction(jumpTime), transition: '25ms bottom linear' }}>\n                <img src={`/dinosaur${imageExtension}.png`} className=\"fill\" />\n            </div>\n        ),\n        [sprite, jumpTime, gameState],\n    )\n}\n","export const heightFunction = (time: number): number => {\n    return 12 + 0.7 * time - 0.0014 * time * time\n}\n","import { Ground } from './Ground'\nexport default Ground\n","import React, { useEffect, useMemo, useState } from 'react'\n\nimport { GameState } from '../Stage'\n\ninterface GroundProps {\n    gameState: GameState\n    gameLevel: number\n}\n\nexport const Ground: React.FC<GroundProps> = (props: GroundProps) => {\n    const { gameState, gameLevel } = props\n    const [dx, setDx] = useState<number>(0)\n\n    useEffect(() => {\n        if (gameState !== GameState.InProgress) {\n            setDx(0)\n            return\n        }\n        const timeout = setTimeout(() => {\n            if (dx >= 680) {\n                setDx(0)\n            } else {\n                setDx(dx + 10)\n            }\n        }, 30 - gameLevel * 3)\n        return () => clearTimeout(timeout)\n    }, [dx, gameState, gameLevel])\n\n    return useMemo(\n        () => (\n            <div className=\"relative w-full h-10 mt-auto overflow-hidden whitespace-nowrap\">\n                <div className={'absolute bottom-0 left-0 flex'} style={{ left: -dx, transition: `${30 - gameLevel * 3} left linear` }}>\n                    <img className=\"h-10 object-cover m-0\" src=\"/ground.png\" width={680} />\n                    <img className=\"h-10 object-cover m-0\" src=\"/ground.png\" width={680} />\n                </div>\n            </div>\n        ),\n        [dx, gameState],\n    )\n}\n","import { Message } from './Message'\nexport default Message\n","import React from 'react'\n\nimport { GameState } from '../Stage/Stage'\n\ninterface MessageProps {\n    gameState: GameState\n}\n\nexport const Message: React.FC<MessageProps> = (props: MessageProps) => {\n    const { gameState } = props\n\n    if (gameState === GameState.InProgress) return null\n\n    let messageText = ''\n    let messageSubtext\n    if (gameState === GameState.NotStarted) {\n        messageText = 'Hit space or ↑ to start'\n        messageSubtext = 'Jump using space or ↑ and avoid the obstacles'\n    } else if (gameState === GameState.Dead) {\n        messageText = 'Game Over'\n        messageSubtext = 'Hit space or ↑ to restart'\n    }\n\n    return (\n        <div className=\"z-40 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 uppercase flex flex-col items-center\">\n            <h2 className=\"text-center text-2xl\">{messageText}</h2>\n            <p className=\"text-center text-sm\">{messageSubtext}</p>\n        </div>\n    )\n}\n","import { Obstacle } from './Obstacle'\nexport default Obstacle\n","import React, { useEffect, useMemo, useState } from 'react'\nimport { RiCactusFill } from 'react-icons/ri'\n\nimport { GameState } from '../Stage/Stage'\n\ninterface ObstacleProps {\n    gameState: GameState\n    gameLevel: number\n    obstacleRef: React.RefObject<HTMLDivElement>\n    numObstacles: number\n}\n\nexport const Obstacle: React.FC<ObstacleProps> = (props: ObstacleProps) => {\n    const { gameState, gameLevel, obstacleRef, numObstacles } = props\n    const [lifetime, setLifetime] = useState<boolean>(true)\n    const [dx, setDx] = useState<number>(700)\n\n    useEffect(() => {\n        const timeout = setTimeout(() => setLifetime(false), (30 - gameLevel * 3) * (75 + 10))\n        return () => clearTimeout(timeout)\n    }, [])\n\n    useEffect(() => {\n        if (!lifetime || !gameState) return\n        const timeout = setTimeout(() => {\n            setDx(dx - 10)\n        }, 30 - gameLevel * 3)\n        return () => clearTimeout(timeout)\n    }, [dx, lifetime, gameState, gameLevel])\n\n    return useMemo(() => {\n        if (!lifetime || gameState !== GameState.InProgress) return null\n        return (\n            <div\n                ref={obstacleRef}\n                className={`${gameState !== GameState.InProgress ? 'hidden' : ''} absolute bottom-2 z-10 h-12 mt-auto flex flex-row`}\n                style={{ left: dx, transition: `${30 - gameLevel * 3} left linear` }}\n            >\n                {new Array(numObstacles).fill(undefined).map((x, idx) => (\n                    <RiCactusFill key={idx} className=\"text-gray-600 w-12 h-12\" />\n                ))}\n            </div>\n        )\n    }, [lifetime, dx, gameState])\n}\n","import React from 'react'\n\nconst padInt = (x: number, length: number): string => {\n    let leadingZeroes = ''\n    for (let i = 0; i < length; i++) leadingZeroes += '0'\n    return `${leadingZeroes}${x}`.slice(-length)\n}\n\ninterface ScoreProps {\n    score: number\n    highScore: number\n}\n\nexport const Score: React.FC<ScoreProps> = (props: ScoreProps) => {\n    const { score, highScore } = props\n    return (\n        <div className=\"absolute right-0\">\n            <span>HIGH SCORE: {padInt(Math.max(score, highScore), 5)}</span>\n            <span className=\"mx-10\">SCORE: {padInt(score, 5)}</span>\n        </div>\n    )\n}\n","import { Score } from './Score'\nexport default Score\n","import { GameState, Stage } from './Stage'\nexport { GameState }\nexport default Stage\n","export const STAGE_WIDTH = 680\nexport const GROUND_SPEED = 2000\nexport const OBSTACLE_SPEED = 2200\n","import React from 'react'\n\nimport Stage from './Components/Stage'\n\nfunction App(): JSX.Element {\n    return <Stage />\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n        })\n    }\n}\n\nexport default reportWebVitals\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}